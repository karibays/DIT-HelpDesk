{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { Component } from '@firebase/component';\nimport { getToken, deleteToken, onMessage } from '@firebase/messaging';\nimport { isIndexedDBAvailable, areCookiesEnabled } from '@firebase/util';\nimport { onBackgroundMessage } from '@firebase/messaging/sw';\nconst name = \"@firebase/messaging-compat\";\nconst version = \"0.1.14\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction isSupported() {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSwSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowSupported();\n  }\n}\n/**\r\n * Checks to see if the required APIs exist.\r\n * Unlike the modular version, it does not check if IndexedDB.open() is allowed\r\n * in order to keep isSupported() synchronous and maintain v8 compatibility.\r\n */\n\n\nfunction isWindowSupported() {\n  return typeof window !== 'undefined' && isIndexedDBAvailable() && areCookiesEnabled() && 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'fetch' in window && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}\n/**\r\n * Checks to see if the required APIs exist within SW Context.\r\n */\n\n\nfunction isSwSupported() {\n  return isIndexedDBAvailable() && 'PushManager' in self && 'Notification' in self && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}\n\nclass MessagingCompatImpl {\n  constructor(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  async getToken(options) {\n    return getToken(this._delegate, options);\n  }\n\n  async deleteToken() {\n    return deleteToken(this._delegate);\n  }\n\n  onMessage(nextOrObserver) {\n    return onMessage(this._delegate, nextOrObserver);\n  }\n\n  onBackgroundMessage(nextOrObserver) {\n    return onBackgroundMessage(this._delegate, nextOrObserver);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst messagingCompatFactory = container => {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // in sw\n    return new MessagingCompatImpl(container.getProvider('app-compat').getImmediate(), container.getProvider('messaging-sw').getImmediate());\n  } else {\n    // in window\n    return new MessagingCompatImpl(container.getProvider('app-compat').getImmediate(), container.getProvider('messaging').getImmediate());\n  }\n};\n\nconst NAMESPACE_EXPORTS = {\n  isSupported\n};\n\nfunction registerMessagingCompat() {\n  firebase.INTERNAL.registerComponent(new Component('messaging-compat', messagingCompatFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(NAMESPACE_EXPORTS));\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nregisterMessagingCompat();\nfirebase.registerVersion(name, version);","map":{"version":3,"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;AAeG;;SAwCaA,cAAW;EACzB,IAAIC,IAAI,IAAI,8BAA8BA,IAA1C,EAAgD;;IAE9C,OAAOC,aAAa,EAApB;EACD,CAHD,MAGO;;IAEL,OAAOC,iBAAiB,EAAxB;EACD;AACF;AAED;;;;AAIG;;;AACH,SAASA,iBAAT,GAA0B;EACxB,OACE,OAAOC,MAAP,KAAkB,WAAlB,IACAC,oBAAoB,EADpB,IAEAC,iBAAiB,EAFjB,IAGA,mBAAmBC,SAHnB,IAIA,iBAAiBH,MAJjB,IAKA,kBAAkBA,MALlB,IAMA,WAAWA,MANX,IAOAI,yBAAyB,CAACC,SAA1B,CAAoCC,cAApC,CAAmD,kBAAnD,CAPA,IAQAC,gBAAgB,CAACF,SAAjB,CAA2BC,cAA3B,CAA0C,QAA1C,CATF;AAWD;AAED;;AAEG;;;AACH,SAASR,aAAT,GAAsB;EACpB,OACEG,oBAAoB,MACpB,iBAAiBJ,IADjB,IAEA,kBAAkBA,IAFlB,IAGAO,yBAAyB,CAACC,SAA1B,CAAoCC,cAApC,CAAmD,kBAAnD,CAHA,IAIAC,gBAAgB,CAACF,SAAjB,CAA2BC,cAA3B,CAA0C,QAA1C,CALF;AAOD;;MAEYE,oBAAmB;EAC9BC,WAAqB,MAAyBC,SAAzB,EAA6C;IAA7C,KAAGC,GAAH;IAAyB,KAASD,SAAT;IAC5C,KAAKC,GAAL,GAAWA,GAAX;IACA,KAAKD,SAAL,GAAiBA,SAAjB;EACD;;EAEa,MAARE,QAAQ,CAACC,OAAD,EAGb;IACC,OAAOD,QAAQ,CAAC,KAAKF,SAAN,EAAiBG,OAAjB,CAAf;EACD;;EAEgB,MAAXC,WAAW;IACf,OAAOA,WAAW,CAAC,KAAKJ,SAAN,CAAlB;EACD;;EAEDK,SAAS,CACPC,cADO,EAC0D;IAEjE,OAAOD,SAAS,CAAC,KAAKL,SAAN,EAAiBM,cAAjB,CAAhB;EACD;;EAEDC,mBAAmB,CACjBD,cADiB,EACgD;IAEjE,OAAOC,mBAAmB,CAAC,KAAKP,SAAN,EAAiBM,cAAjB,CAA1B;EACD;;AA3B6B;ACjGhC;;;;;;;;;;;;;;;AAeG;;;AAiBH,MAAME,sBAAsB,GAC1BC,SADkE,IAEhE;EACF,IAAItB,IAAI,IAAI,8BAA8BA,IAA1C,EAAgD;;IAE9C,OAAO,IAAIW,mBAAJ,CACLW,SAAS,CAACC,WAAV,CAAsB,YAAtB,EAAoCC,YAApC,EADK,EAELF,SAAS,CAACC,WAAV,CAAsB,cAAtB,EAAsCC,YAAtC,EAFK,CAAP;EAID,CAND,MAMO;;IAEL,OAAO,IAAIb,mBAAJ,CACLW,SAAS,CAACC,WAAV,CAAsB,YAAtB,EAAoCC,YAApC,EADK,EAELF,SAAS,CAACC,WAAV,CAAsB,WAAtB,EAAmCC,YAAnC,EAFK,CAAP;EAID;AACF,CAhBD;;AAkBA,MAAMC,iBAAiB,GAAG;EACxB1B;AADwB,CAA1B;;SAIgB2B,0BAAuB;EACpCC,QAA+B,CAACC,QAAhC,CAAyCC,iBAAzC,CACC,IAAIC,SAAJ,CACE,kBADF,EAEET,sBAFF,EAEwB;EAAA;EAFxB,EAIEU,eAJF,CAIkBN,iBAJlB,CADD;AAOH;AC9DA;;;;;;;;;;;;;;;AAeG;;;AAQHC,uBAAuB;AACvBC,QAAQ,CAACK,eAAT,CAAyBC,IAAzB,EAA+BC,OAA/B","names":["isSupported","self","isSwSupported","isWindowSupported","window","isIndexedDBAvailable","areCookiesEnabled","navigator","ServiceWorkerRegistration","prototype","hasOwnProperty","PushSubscription","MessagingCompatImpl","constructor","_delegate","app","getToken","options","deleteToken","onMessage","nextOrObserver","onBackgroundMessage","messagingCompatFactory","container","getProvider","getImmediate","NAMESPACE_EXPORTS","registerMessagingCompat","firebase","INTERNAL","registerComponent","Component","setServiceProps","registerVersion","name","version"],"sources":["C:\\Users\\karib\\Desktop\\test\\my-app\\node_modules\\@firebase\\messaging-compat\\src\\messaging-compat.ts","C:\\Users\\karib\\Desktop\\test\\my-app\\node_modules\\@firebase\\messaging-compat\\src\\registerMessagingCompat.ts","C:\\Users\\karib\\Desktop\\test\\my-app\\node_modules\\@firebase\\messaging-compat\\src\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp as AppCompat,\n  _FirebaseService\n} from '@firebase/app-compat';\nimport {\n  Messaging,\n  MessagePayload,\n  deleteToken,\n  getToken,\n  onMessage\n} from '@firebase/messaging';\nimport {\n  areCookiesEnabled,\n  isIndexedDBAvailable,\n  NextFn,\n  Observer,\n  Unsubscribe\n} from '@firebase/util';\n\nimport { onBackgroundMessage } from '@firebase/messaging/sw';\n\nexport interface MessagingCompat {\n  getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string>;\n\n  deleteToken(): Promise<boolean>;\n\n  onMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe;\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe;\n}\n\nexport function isSupported(): boolean {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSwSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowSupported();\n  }\n}\n\n/**\n * Checks to see if the required APIs exist.\n * Unlike the modular version, it does not check if IndexedDB.open() is allowed\n * in order to keep isSupported() synchronous and maintain v8 compatibility.\n */\nfunction isWindowSupported(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    isIndexedDBAvailable() &&\n    areCookiesEnabled() &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks to see if the required APIs exist within SW Context.\n */\nfunction isSwSupported(): boolean {\n  return (\n    isIndexedDBAvailable() &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\nexport class MessagingCompatImpl implements MessagingCompat, _FirebaseService {\n  constructor(readonly app: AppCompat, readonly _delegate: Messaging) {\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  async getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string> {\n    return getToken(this._delegate, options);\n  }\n\n  async deleteToken(): Promise<boolean> {\n    return deleteToken(this._delegate);\n  }\n\n  onMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    return onMessage(this._delegate, nextOrObserver);\n  }\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    return onBackgroundMessage(this._delegate, nextOrObserver);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactory\n} from '@firebase/component';\nimport { MessagingCompatImpl, isSupported } from './messaging-compat';\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'messaging-compat': MessagingCompatImpl;\n  }\n}\n\nconst messagingCompatFactory: InstanceFactory<'messaging-compat'> = (\n  container: ComponentContainer\n) => {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // in sw\n    return new MessagingCompatImpl(\n      container.getProvider('app-compat').getImmediate(),\n      container.getProvider('messaging-sw').getImmediate()\n    );\n  } else {\n    // in window\n    return new MessagingCompatImpl(\n      container.getProvider('app-compat').getImmediate(),\n      container.getProvider('messaging').getImmediate()\n    );\n  }\n};\n\nconst NAMESPACE_EXPORTS = {\n  isSupported\n};\n\nexport function registerMessagingCompat(): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'messaging-compat',\n      messagingCompatFactory,\n      ComponentType.PUBLIC\n    ).setServiceProps(NAMESPACE_EXPORTS)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name, version } from '../package.json';\n\nimport firebase from '@firebase/app-compat';\nimport { registerMessagingCompat } from './registerMessagingCompat';\nimport { MessagingCompat } from './messaging-compat';\n\nregisterMessagingCompat();\nfirebase.registerVersion(name, version);\n\n/**\n * Define extension behavior of `registerMessaging`\n */\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    messaging: {\n      (app?: FirebaseApp): MessagingCompat;\n      isSupported(): boolean;\n    };\n  }\n  interface FirebaseApp {\n    messaging(): MessagingCompat;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}