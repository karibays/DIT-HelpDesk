{"ast":null,"code":"import { getFirestore } from \"firebase/firestore\";\nimport { initializeApp } from \"firebase/app\";\nimport { getMessaging } from \"https://www.gstatic.com/firebasejs/9.0.0/firebase-messaging-sw.js\"; // For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBlg0XWhroVthcRo6iF4D3LrwsssGsF9pc\",\n  authDomain: \"dit-push-notification.firebaseapp.com\",\n  projectId: \"dit-push-notification\",\n  storageBucket: \"dit-push-notification.appspot.com\",\n  messagingSenderId: \"370587011418\",\n  appId: \"1:370587011418:web:7620d6a3b2997cccad0b63\"\n};\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore();\nexport { db };\nconst messaging = getMessaging(app);\nconst {\n  REACT_APP_VAPID_KEY\n} = process.env;\nconst publicKey = REACT_APP_VAPID_KEY;\nexport const getToken = async setTokenFound => {\n  let currentToken = \"\";\n\n  try {\n    currentToken = await messaging.getToken({\n      vapidKey: publicKey\n    });\n\n    if (currentToken) {\n      setTokenFound(true);\n    } else {\n      setTokenFound(false);\n    }\n  } catch (error) {\n    console.log(\"An error occurred while retrieving token. \", error);\n  }\n\n  return currentToken;\n};\nexport const onMessageListener = () => new Promise(resolve => {\n  messaging.onMessage(payload => {\n    resolve(payload);\n  });\n});\nexport const registerServiceWorker = () => {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.register('firebase-messaging-sw.js').then(function (registration) {\n      return registration.scope;\n    }).catch(function (err) {\n      return err;\n    });\n  }\n};","map":{"version":3,"names":["getFirestore","initializeApp","getMessaging","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","db","messaging","REACT_APP_VAPID_KEY","process","env","publicKey","getToken","setTokenFound","currentToken","vapidKey","error","console","log","onMessageListener","Promise","resolve","onMessage","payload","registerServiceWorker","navigator","serviceWorker","register","then","registration","scope","catch","err"],"sources":["C:/Users/karib/Desktop/test/my-app/src/firebaseInit.js"],"sourcesContent":["import { getFirestore } from \"firebase/firestore\";\nimport { initializeApp } from \"firebase/app\";\nimport { getMessaging } from \"https://www.gstatic.com/firebasejs/9.0.0/firebase-messaging-sw.js\";\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBlg0XWhroVthcRo6iF4D3LrwsssGsF9pc\",\n  authDomain: \"dit-push-notification.firebaseapp.com\",\n  projectId: \"dit-push-notification\",\n  storageBucket: \"dit-push-notification.appspot.com\",\n  messagingSenderId: \"370587011418\",\n  appId: \"1:370587011418:web:7620d6a3b2997cccad0b63\"\n};\n\n\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore();\nexport { db };\n\nconst messaging = getMessaging(app);\n\nconst { REACT_APP_VAPID_KEY } = process.env;\nconst publicKey = REACT_APP_VAPID_KEY;\n\nexport const getToken = async (setTokenFound) => {\n  let currentToken = \"\";\n\n  try {\n    currentToken = await messaging.getToken({ vapidKey: publicKey });\n    if (currentToken) {\n      setTokenFound(true);\n    } else {\n      setTokenFound(false);\n    }\n  } catch (error) {\n    console.log(\"An error occurred while retrieving token. \", error);\n  }\n\n  return currentToken;\n};\n\nexport const onMessageListener = () =>\n  new Promise((resolve) => {\n    messaging.onMessage((payload) => {\n      resolve(payload);\n    });\n  });\n\nexport const registerServiceWorker = () => {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker\n            .register('firebase-messaging-sw.js')\n            .then(function (registration) {\n                return registration.scope;\n            })\n            .catch(function (err) {\n                return err;\n            })}}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,oBAA7B;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,YAAT,QAA6B,mEAA7B,C,CAEA;;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCADa;EAErBC,UAAU,EAAE,uCAFS;EAGrBC,SAAS,EAAE,uBAHU;EAIrBC,aAAa,EAAE,mCAJM;EAKrBC,iBAAiB,EAAE,cALE;EAMrBC,KAAK,EAAE;AANc,CAAvB;AAWA,MAAMC,GAAG,GAAGT,aAAa,CAACE,cAAD,CAAzB;AACA,MAAMQ,EAAE,GAAGX,YAAY,EAAvB;AACA,SAASW,EAAT;AAEA,MAAMC,SAAS,GAAGV,YAAY,CAACQ,GAAD,CAA9B;AAEA,MAAM;EAAEG;AAAF,IAA0BC,OAAO,CAACC,GAAxC;AACA,MAAMC,SAAS,GAAGH,mBAAlB;AAEA,OAAO,MAAMI,QAAQ,GAAG,MAAOC,aAAP,IAAyB;EAC/C,IAAIC,YAAY,GAAG,EAAnB;;EAEA,IAAI;IACFA,YAAY,GAAG,MAAMP,SAAS,CAACK,QAAV,CAAmB;MAAEG,QAAQ,EAAEJ;IAAZ,CAAnB,CAArB;;IACA,IAAIG,YAAJ,EAAkB;MAChBD,aAAa,CAAC,IAAD,CAAb;IACD,CAFD,MAEO;MACLA,aAAa,CAAC,KAAD,CAAb;IACD;EACF,CAPD,CAOE,OAAOG,KAAP,EAAc;IACdC,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DF,KAA1D;EACD;;EAED,OAAOF,YAAP;AACD,CAfM;AAiBP,OAAO,MAAMK,iBAAiB,GAAG,MAC/B,IAAIC,OAAJ,CAAaC,OAAD,IAAa;EACvBd,SAAS,CAACe,SAAV,CAAqBC,OAAD,IAAa;IAC/BF,OAAO,CAACE,OAAD,CAAP;EACD,CAFD;AAGD,CAJD,CADK;AAOP,OAAO,MAAMC,qBAAqB,GAAG,MAAM;EACvC,IAAI,mBAAmBC,SAAvB,EAAkC;IAC9BA,SAAS,CAACC,aAAV,CACKC,QADL,CACc,0BADd,EAEKC,IAFL,CAEU,UAAUC,YAAV,EAAwB;MAC1B,OAAOA,YAAY,CAACC,KAApB;IACH,CAJL,EAKKC,KALL,CAKW,UAAUC,GAAV,EAAe;MAClB,OAAOA,GAAP;IACH,CAPL;EAOO;AAAC,CATT"},"metadata":{},"sourceType":"module"}